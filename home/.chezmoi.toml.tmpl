{{- $email := promptStringOnce . "email" "Email" -}}
{{- $name := promptStringOnce . "name" "Name" -}}
{{- $github_username := promptStringOnce . "github.user" "Github Username" -}}
{{- $aws_credentials_source := promptStringOnce . "aws.credentials_source" "AWS Credentials Source" -}}

[scriptEnv]
DEBUG_SCRIPTS = {{ if .debug_scripts }}"true"{{ else }}"false"{{ end }}

[data]
email = {{ $email | toToml }}
name = {{ $name | toToml }}

debug_scripts = {{ if .debug_scripts }}true{{ else }}false {{ end }}

{{ if (dig "aws" "credentials_source" false .) -}}
[data.aws]
credentials_source = {{ .aws.credentials_source | quote }}
{{- else -}}
## We can populate ~/.aws/credentials from file fragments in 1Password.
## PRs would be considered for populating ~/.aws/credentials from other sources.
##
## If this is unset, Chezmoi is set to ignore ~/.aws/credentials.
# [data.aws]
# credentials_source = "1password"
{{- end }}

{{ if (. | dig "git" "signing" false) -}}
[data.git.signing]
{{ .git.signing | toToml }}
{{- else -}}
## Git supports GPG or SSH-based key-signing. If using SSH key signing, set format to
## 'ssh', and either specify the key *path* or the special key string 'key::ssh-TYPE
## VALUE IDENTITY'.
# [data.git.signing]
# format = 'ssh'
# key = 'key::ssh-TYPE VALUE IDENTITY'
{{- end }}

[data.github]
user = {{ $github_username | toToml }}

{{ if (. | dig "github" "tokens" false) }}
{{- range $key, $value := .github.tokens -}}{{- if (typeIsLike "map[string]interface {}" $value) -}}
[data.github.tokens.{{ $key }}]
{{ $value | toToml }}
{{ end -}}{{- end -}}
{{- else -}}
## Add GitHub token options here. Only 1Password retrieval is supported, and the type is
## expected to be an API Credential type with at least 'user' and 'credential' values
## set.
##
## We look for the following tokens:
##
## - homebrew_api (~/.config/brew/config.fish.tmpl, ~/.config/brew/config.sh.tmpl)
## - homebrew_packages (~/.config/brew/config.fish.tmpl, ~/.config/brew/config.sh.tmpl)
## - github_keystore (~/.github_keystore)
## - vim_rhubarb (~/.netrc)
## - github_hub (~/.config/hub)
## - github_gh (~/.config/gh/hosts.yml)
##
# [data.github.tokens.homebrew_api]
# type = '1p'
# name = '***'
# vault = '***'
# account = '***'
{{- end -}}

{{ if (. | dig "ruby" "rubygems" false) }}
{{- range $key, $value := .ruby.rubygems -}}
{{-   if (typeIsLike "map[string]interface {}" $value) -}}
[data.ruby.rubygems.{{ $key }}]
{{ $value | toToml }}
{{ end -}}{{- end -}}
{{- else -}}
## Rubygems Configuration
##
## This uses the same format as GitHub token options.
# [data.ruby.rubygems.geminabox]
# type = '1p'
# name = '***'
# vault = '***'
# account = '***'
#
# [data.ruby.rubygems.apikey]
# type = '1p'
# name = '***'
# vault = '***'
# account = '***'
{{- end }}

[data.ruby.hoe]
email = {{ $email | toToml }}

[data.ruby.rubygems]
user = {{ $email | toToml }}

{{ if (hasKey . "gnupg") -}}
[data.gnupg]
default_key = {{ .gnupg.default_key | toToml }}
{{- else -}}
## If using GPG, set the default key here.
##
# [data.gnupg]
# default_key = ''
{{- end }}

{{ if (. | dig "ssh" "keys" false) -}}
{{- range .ssh.keys -}}
[[data.ssh.keys]]
{{ . | toToml }}
{{ end -}}
{{- else -}}
## Set the key names to be used here. These are the private key file names,
## without reference to ~/.ssh
##
[data.ssh]
keys = []
{{- end }}

{{ if (. | dig "ssh" "hosts" false) }}
{{- range .ssh.hosts -}}
[[data.ssh.hosts]]
{{ . | toToml }}
{{ end -}}
{{- else -}}
## Build the SSH configuration file with hosts specified here. In each array entry,
## the 'host' key is the pattern for the `Host â€¦` line. The config array is the list
## of host-specific configuration entries to follow.
##
# [[data.ssh.hosts]]
# config = [
#   'HostName bastion-host-name',
#   'LocalForward localhost:15432 database-host-name:5432',
# ]
# host = 'database-tunnel'
{{- end }}

[diff]
exclude = ['scripts']
