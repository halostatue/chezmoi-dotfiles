#!/usr/bin/env bash

set -o pipefail

usage() {
  cat <<EOF
usage: $(basename "$0") [-L | --long] [--copy] [REVIEW-BASE]
       $(basename "$0") [-h | --help | -?]

Prints a reverse 'git log' using a bare format or a light markdown list
format ('--long'). If REVIEW-BASE is not provided, the default is the output
of the 'git-review-base' script.

The --long format is this format repeated for each commit.

  - **subject** (hash)

    body (wrapped at 74 characters)

If --copy is provided, the output is sent through one of several different
tools, depending on platform and availability. The tools are 'pbcopy', 'cb',
'wl-copy', 'xclip', 'xsel', 'clipboard', or 'clip'.
EOF
}

declare -a args

format="%B"
copy=false

while (($#)); do
  case "$1" in
  --long | -L) format="- **%s** (%h)%n%n%w(74,2,2)%b" ;;
  --copy) copy=true ;;
  -h | --help | -?)
    usage
    exit 0
    ;;
  *) args+=("$1") ;;
  esac

  shift
done

set -- "${args[@]}"

if (($#)); then
  review_base="$1"
elif ! review_base="$(git review-base)"; then
  exit 1
fi

has() {
  command -v "$1" >/dev/null 2>/dev/null
}

copy_to_clipboard() {
  tee /dev/tty |
    if has copy; then
      command copy
    elif has pbcopy; then
      pbcopy
    elif has cb; then
      cb --copy
    elif [[ -n "${WAYLAND_DISPLAY}" ]] && has wl-copy; then
      wl-copy
    elif has xclip; then
      xclip -sel clip
    elif has xsel; then
      xsel --clipboard --input
    elif has clipboard; then
      clipboard --stdin
    elif has clip; then
      clip
    else
      true
    fi
}

args=(log --reverse --format="${format}" "${review_base}"..HEAD)

if "${copy}"; then
  {
    git "${args[@]}" | copy_to_clipboard
  } || exit 1
  printf >&2 "\n--\nCopied!\n"
else
  git "${args[@]}"
fi
