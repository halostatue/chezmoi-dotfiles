#!/bin/bash

# tmux requires unrecognized OSC sequences to be wrapped with DCS tmux;
# <sequence> ST, and for all ESCs in <sequence> to be replaced with ESC ESC. It
# only accepts ESC backslash for ST.
print_osc() {
  if [[ "${TERM}" == screen* ]]; then
    printf "\033Ptmux;\033\033]"
  else
    printf "\033]"
  fi
}

# More of the tmux workaround described above.
print_st() {
  if [[ "${TERM}" == screen* ]]; then
    printf "\a\033\\"
  else
    printf "\a"
  fi
}

show_help() {
  bn0="$(basename "$0")"
  cat >&2 <<HELP
Usage:
  ${bn0} set 8
  ${bn0} set 9
  ${bn0} push [name]
     Saves the current version with an optional name.
  ${bn0} pop [name]
     If name is given, all versions up to and including the one with the
     matching name are popped.
HELP
}

set_version() {
  print_osc
  printf "1337;UnicodeVersion=%s" "$1"
  print_st
}

push_version() {
  print_osc
  printf "1337;UnicodeVersion=push %s" "$1"
  print_st
}

pop_version() {
  print_osc
  printf "1337;UnicodeVersion=pop %s" "$1"
  print_st
}

## Main
if [[ $# == 0 ]]; then
  show_help
  exit 1
fi

if [[ $1 == set ]]; then
  if [[ $# != 2 ]]; then
    show_help
    exit 1
  fi
  set_version "$2"
elif [[ $1 == push ]]; then
  if [[ $# == 1 ]]; then
    push_version ""
  elif [[ $# == 2 ]]; then
    if [[ $2 == "" ]]; then
      echo "Name must not be empty" 1>&2
      exit 1
    fi
    push_version "$2"
  else
    show_help
    exit 1
  fi
elif [[ $1 == pop ]]; then
  if [[ $# == 1 ]]; then
    pop_version ""
  elif [[ $# == 2 ]]; then
    if [[ $2 == "" ]]; then
      echo "Name must not be empty" 1>&2
      exit 1
    fi
    pop_version "$2"
  else
    show_help
    exit 1
  fi
else
  show_help
  exit 1
fi
