#!/bin/bash

# Fuzzy-find a git commit. You can use `git shalector main` to select commits
# from main, otherwise it uses the current branch.

set -o pipefail

declare -a args
args=()

copy=false
show=false

while (($#)); do
  case "$1" in
  -C | --copy) copy=true ;;
  -S | --show) show=true ;;
  *) args+=("$1") ;;
  esac
  shift
done

set -- "${args[@]}"

has() {
  command -v "$1" >/dev/null 2>/dev/null
}

copy_to_clipboard() {
  tee /dev/tty |
    if has copy; then
      command copy
    elif has pbcopy; then
      pbcopy
    elif has cb; then
      cb --copy
    elif [[ -n "${wayland_display}" ]] && has wl-copy; then
      wl-copy
    elif has xclip; then
      xclip -sel clip
    elif has xsel; then
      xsel --clipboard --input
    elif has clipboard; then
      clipboard --stdin
    elif has clip; then
      clip
    else
      true
    fi
}

if ! branch="${1:-$(git rev-parse head)}"; then
  exit 1
fi

if ! target_commit=$(
  git log -75 --color=always "${branch}" |
    fzf --ansi --no-sort --reverse --tiebreak=index |
    awk '{print $1}'
); then
  exit 1
fi

if [[ "${show}" == true ]]; then
  if [[ "${copy}" == true ]]; then
    {
      git show "${target_commit}" | copy_to_clipboard
    } || exit 1
  else
    git show "${target_commit}"
  fi
elif [[ "${copy}" == true ]]; then
  {
    echo "${target_commit}" | tee /dev/tty | copy_to_clipboard
  } || exit 1
else
  echo "${target_commit}"
fi
