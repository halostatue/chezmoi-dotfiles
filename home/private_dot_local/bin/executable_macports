#! /usr/bin/env bash

set -uo pipefail

tested-on() {
  local build_tools build_version hardware
  product_version="$(sw_vers -productVersion)"
  build_version="$(sw_vers -buildVersion)"
  hardware="$(uname -m)"

  if build_tools="$(xcodebuild -version 2>/dev/null)"; then
    build_tools="$(echo "${build_tools}" | awk 'NR==1 { x=$0 } END { print x" "$NF }')"
  elif build_tools="$(pkgutil --pkg-info=com.apple.pkg.CLTools_Executables)"; then
    build_tools="$(echo "${build_tools}" | awk '/version:/ { print $2 }')"
    build_tools="Command Line Tools ${build_tools}"
  fi

  echo macOS "${product_version}" "${build_version}" "${hardware}"
  echo "${build_tools}"
}

github-setup-version() {
  awk '/^github.setup/ { print $4; }'
}

build-update-pr() {
  port_name="$(basename "${1:?}")"

  seaport clip "${port_name}"
  version="$(pbpaste | github-setup-version)"

  if [[ -z "${version}" ]]; then
    echo "${port_name} cannot determine version"
    return 1
  fi

  if git log --grep="\\b${port_name}.\\+${version}" --since "7 days ago" | grep -q .; then
    echo "${port_name} ${version} has already been merged."
    git log --grep="\\b${port_name}.\\+${version}" --since "7 days ago"
    return 1
  fi

  if [[ "$(gh pr list --search "${port_name}" -q '(. | length) > 0' --json number)" == true ]]; then
    echo "${port_name} ${version} already has an open PR."
    gh pr list --search ruby-build -q 'map("#\(.number) \(.title)") | .[]' --json number,title
    return 1
  fi

  cd "$1"
  shift

  git switch --create "${port_name}-${version}" master

  if pbpaste | grep -q ^cargo.crates; then
    pbpaste | sed '/^cargo.crates/,$d' >Portfile
    crate2port "${port_name}"@"${version}" >>Portfile
  else
    pbpaste >Portfile
  fi

  git diff -u
  read -r -p " Press Ctrl-C to cancel"

  git commit -m "${port_name}: Update to ${version}" Portfile

  prepare-pr "${@}"

  read -r -p " Press Ctrl-C to cancel"

  gh pr create --dry-run --fill --body-file <(pbpaste)

  read -r -p " Press Ctrl-C to cancel"

  gh pr create --fill --body-file <(pbpaste)
}

update-mise() {
  build-update-pr sysutils/mise mise ls
}

update-ruby-build() {
  build-update-pr ruby/ruby-build ruby-build --list
}

update-colima() {
  build-update-pr sysutils/colima colima status
}

update-port() {
  set -euo pipefail

  local portpath port_name version
  portpath="$(zoxide query macports-ports)"
  cd "${portpath}"

  git switch master
  git reup

  if [[ $(type -t "update-$1") == function ]]; then
    "update-$1"
  else
    case "$1" in
    *)
      echo >&2 "Unknown procedure for updating $1"
      exit 1
      ;;
    esac
  fi
}

prepare-pr() (
  set -ex

  port lint --nitpick
  sudo port install
  "$@"

  set +ex

  description="$(git log master.. --format=%B)"
  tested_on="$(tested-on)"

  cat <<INFO | tee /dev/tty | pbcopy
#### Description

${description}

##### Tested on

${tested_on}

##### Verification

Have you

- [x] followed our [Commit Message Guidelines](https://trac.macports.org/wiki/CommitMessages)?
- [x] squashed and [minimized your commits](https://guide.macports.org/#project.github)?
- [x] checked that there aren't other open [pull requests](https://github.com/macports/macports-ports/pulls) for the same change?
- [x] checked your Portfile with \`port lint --nitpick\`?
- [x] tried a full install with \`sudo port -vst install\`?
- [x] tested basic functionality of all binary files?
INFO
)

trac-get() {
  local url="$1" dir="$2"

  [[ -n "${dir}" ]] || dir=.

  curl "${url}?format=raw" --create-dirs -o "${dir}/$(basename "$1")"
}

trac-patch() {
  local cmd

  while [[ "$1" == -* ]]; do
    [[ "$1" == -- ]] && break

    cmd="${cmd} $1"
    shift
  done

  [[ -n "${cmd}" ]] || cmd="--strip 0"

  trac-get "$@"

  patch "${cmd}" <"$(basename "$1")"
}

"$@"
