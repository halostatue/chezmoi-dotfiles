#!/usr/bin/env bash

set -o pipefail

declare append cmd new_profile old_access_key_id old_profile output profile \
  username
append=false

usage() {
  cat <<EOF
Usage: $(basename "$0") COMMAND OPTIONS

Rotate AWS IAM keys.

Commands
  create              Create a new access key
                      Supported options are --profile, --new-profile, --user,
                      --output, and --append.
  deactivate          Deactivate the old access key with the new access key
                      Supported options are --profile, --old-profile, and
                      --user.
  delete              Delete the old access key with the new access key
                      Supported options are --profile, --old-profile, and
                      --user.

Options
  -P, --profile VALUE       The current profile identifier to use for
                            operations. If not provided, tries to use
                            \$AWS_PROFILE.
  -N, --new-profile VALUE   The name of the new profile on create. Defaults to
                            the value of --profile with '-new' appended.
  -O, --old-profile VALUE   The name of the new profile on create. Defaults to
                            the value of --profile with '-new' removed.
  -U, --user VALUE          The AWS username. If not provided, tries to use
                            \$USER.
  -o, --output VALUE        The file where the profile data should be written.
                            Defaults to "./\$username-\$profile-new".
  -a, --append              Appends the created access key to ~/.aws/credentials
                            if provided.
EOF
}

run_create() {
  set -e
  # shellcheck disable=SC2312
  aws --profile "${profile}" iam create-access-key --user-name "${username}" |
    jq -r -f <(
      cat <<JQ
.AccessKey |
  "[${new_profile}]\n" +
  "aws_access_key_id = " + .AccessKeyId + "\n" +
  "aws_secret_access_key = " + .SecretAccessKey + "\n"
JQ
    ) >"${output}"
  set +e

  echo "Wrote new access key to ${output}."

  if "${append}"; then
    cat "${output}" >>~/.aws/credentials
    echo "Appended new access key to ~/.aws/credentials."
  fi
}

run_deactivate() {
  set -e
  aws --profile "${profile}" iam update-access-key --user-name "${username}" \
    --access-key-id "${old_access_key_id}" --status Inactive
  set +e

  echo "Access key ID ${old_access_key_id} deactivated for profile ${old_profile}."
}

run_delete() {
  set -e
  aws --profile "${profile}" iam delete-access-key --user-name "${username}" \
    --access-key-id "${old_access_key_id}"
  set +e

  cat <<EOF
Access key ID ${old_access_key_id} deleted for profile ${old_profile}.

Remember to remove "${old_profile}" from ~/.aws/credentials and rename
"${profile}" to "${old_profile}" to reduce disruption.
EOF
}

while (($#)); do
  case "$1" in
  create | deactivate | delete) cmd="$1" ;;
  -P | --profile)
    profile="${2?}"
    shift
    ;;
  -N | --new-profile)
    new_profile="${2?}"
    shift
    ;;
  -O | --old-profile)
    old_profile="${2?}"
    shift
    ;;
  -U | --user)
    username="${2?}"
    shift
    ;;
  -o | --output)
    output="${2?}"
    shift
    ;;
  -a | --append)
    append=true
    ;;
  -*)
    echo >&2 "Unknown option $1"
    usage >&2
    exit 1
    ;;
  *)
    echo >&2 "Unknown command $1"
    usage >&2
    exit 1
    ;;
  esac

  shift
done

if [[ -z "${cmd}" ]]; then
  echo >&2 "No command provided."
  usage >&2
  exit 1
fi

[[ -z "${username}" ]] && username="${USER?}"
[[ -z "${profile}" ]] && profile="${AWS_PROFILE?}"

case "${cmd}" in
create)
  [[ -z "${new_profile}" ]] && new_profile="${profile}-new"
  [[ -z "${output}" ]] && output="./${username}-${new_profile}"
  ;;

deactivate | delete)
  if [[ -z "${old_profile}" ]]; then
    if ! [[ "${profile}" =~ -new$ ]]; then
      echo >&2 "Cannot derive old profile from ${profile}."
      exit 1
    fi

    old_profile="${profile/-new/}"
  fi

  if ! old_access_key_id="$(
    aws --profile "${old_profile}" configure get aws_access_key_id
  )"; then
    echo >&2 "Cannot get old aws_access_key_id from ${old_profile}."
    exit 1
  fi
  ;;
*) : ;;
esac

"run_${cmd}"
