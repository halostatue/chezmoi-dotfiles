{{- $programs := includeTemplate "programs.tmpl" . | fromJson -}}
# vim: ft=gitconfig

[alias]
  # A typo that turned useful
  addp = add -p

  # This should be default. Whatever.
  co = checkout

  # If we type `git git log`, just run `git log`.
  git = !git

  # Shorter
  staged = diff --cached

  # Useful when resolving conflicts
  stc = diff --stat --name-status --cached

  # Show files that have been otherwise ignored
  ignored = ls-files --others --ignored --exclude-standard

  ls = log --color --graph --pretty=format:'%C(yellow)%d%Creset %Cgreen(%cr)%Creset %C(bold blue)[%an]%Creset %s %Cred(%h)%Creset' --abbrev-commit

  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%an]" --decorate --numstat

  ; review = !"nvim -p $(git files) +\"tabdo Gdiff ${REVIEW_BASE:-origin/$(git main-branch)}\" +\"let g:gitgutter_diff_base = '${REVIEW_BASE:-origin/$(git main-branch)}'\""

  ; reviewone = !"nvim -p +\"tabdo Gdiff ${REVIEW_BASE:-origin/$(git main-branch)}\" +\"let g:gitgutter_diff_base = '${REVIEW_BASE:-origin/$(git main-branch)}'\""
  ; reviewf = !"nvim -p $(git files | fzf -m --reverse --height 40%) +\"tabdo Gdiff ${REVIEW_BASE:-origin/$(git main-branch)}\" +\"let g:gitgutter_diff_base = '${REVIEW_BASE:-origin/$(git main-branch)}'\""

  # Show just the subject and body of a particular commit (default: HEAD)
  message = log -n1 --format=\"%s%n%n%b\"

  # Show a markdown-formatted summary of commits from {REVIEW_BASE:-origin/$(git main-branch)} until HEAD
  head = rev-parse HEAD

  todo = grep -Ee '\\bTODO:?\\b'
  fixme = grep -Ee '\\bFIX(ME)?:?\\b'

  safe = !mkdir .git/safe

	# cleanup = "!git branch --format=\"%(if:notequals=*)%(HEAD)%(then)%(if:notequals=${1:-$(git main-branch)})%(refname:lstrip=2)%(then)%(refname:lstrip=2)%(end)%(end)\" --merged $(git main-branch) | xargs -rpxL1 git branch -d"

  save ="!f() { if [ \"$#\" -lt 1 ]; then echo \"No revision given! You must specify a valid ref.\"; exit 1; fi; if [ \"$#\" -lt 2 ]; then echo \"No file(s) given! Files must be specified.\"; exit 1; fi; dir=\"`git rev-parse--show-toplevel`\"; ref=\"$1\"; shift; cd \"${dir}\"; dest=\"`echo \"${ref}\" | sed 's-/-_-g'`\"; for f in \"$@\"; do git show \"${ref}:${f}\" \"${f}.${dest}\"; done; }"

{{ if $programs.fzf }}
  # Show the log in fzf
  fzflog = "!git log --color=always --format='%C(auto)%h%d %s %C(black)%C(bold)%cr' \"$@\" | '{{ $programs.fzf }}' --ansi | awk '{ print $1 }' | tee /dev/tty | pbcopy"
{{ end }}

  conflicted = "!vim +Conflicted"
